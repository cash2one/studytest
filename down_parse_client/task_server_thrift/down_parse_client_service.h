/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef down_parse_client_service_H
#define down_parse_client_service_H

#include <thrift/TDispatchProcessor.h>
#include "down_parse_client_types.h"



class down_parse_client_serviceIf {
 public:
  virtual ~down_parse_client_serviceIf() {}
  virtual int32_t ping() = 0;
  virtual int32_t start(const int32_t task_id, const int32_t is_retry) = 0;
};

class down_parse_client_serviceIfFactory {
 public:
  typedef down_parse_client_serviceIf Handler;

  virtual ~down_parse_client_serviceIfFactory() {}

  virtual down_parse_client_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(down_parse_client_serviceIf* /* handler */) = 0;
};

class down_parse_client_serviceIfSingletonFactory : virtual public down_parse_client_serviceIfFactory {
 public:
  down_parse_client_serviceIfSingletonFactory(const boost::shared_ptr<down_parse_client_serviceIf>& iface) : iface_(iface) {}
  virtual ~down_parse_client_serviceIfSingletonFactory() {}

  virtual down_parse_client_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(down_parse_client_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<down_parse_client_serviceIf> iface_;
};

class down_parse_client_serviceNull : virtual public down_parse_client_serviceIf {
 public:
  virtual ~down_parse_client_serviceNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  int32_t start(const int32_t /* task_id */, const int32_t /* is_retry */) {
    int32_t _return = 0;
    return _return;
  }
};


class down_parse_client_service_ping_args {
 public:

  down_parse_client_service_ping_args() {
  }

  virtual ~down_parse_client_service_ping_args() throw() {}


  bool operator == (const down_parse_client_service_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const down_parse_client_service_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const down_parse_client_service_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class down_parse_client_service_ping_pargs {
 public:


  virtual ~down_parse_client_service_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _down_parse_client_service_ping_result__isset {
  _down_parse_client_service_ping_result__isset() : success(false) {}
  bool success;
} _down_parse_client_service_ping_result__isset;

class down_parse_client_service_ping_result {
 public:

  down_parse_client_service_ping_result() : success(0) {
  }

  virtual ~down_parse_client_service_ping_result() throw() {}

  int32_t success;

  _down_parse_client_service_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const down_parse_client_service_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const down_parse_client_service_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const down_parse_client_service_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _down_parse_client_service_ping_presult__isset {
  _down_parse_client_service_ping_presult__isset() : success(false) {}
  bool success;
} _down_parse_client_service_ping_presult__isset;

class down_parse_client_service_ping_presult {
 public:


  virtual ~down_parse_client_service_ping_presult() throw() {}

  int32_t* success;

  _down_parse_client_service_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _down_parse_client_service_start_args__isset {
  _down_parse_client_service_start_args__isset() : task_id(false), is_retry(true) {}
  bool task_id;
  bool is_retry;
} _down_parse_client_service_start_args__isset;

class down_parse_client_service_start_args {
 public:

  down_parse_client_service_start_args() : task_id(0), is_retry(0) {
  }

  virtual ~down_parse_client_service_start_args() throw() {}

  int32_t task_id;
  int32_t is_retry;

  _down_parse_client_service_start_args__isset __isset;

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  void __set_is_retry(const int32_t val) {
    is_retry = val;
  }

  bool operator == (const down_parse_client_service_start_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(is_retry == rhs.is_retry))
      return false;
    return true;
  }
  bool operator != (const down_parse_client_service_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const down_parse_client_service_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class down_parse_client_service_start_pargs {
 public:


  virtual ~down_parse_client_service_start_pargs() throw() {}

  const int32_t* task_id;
  const int32_t* is_retry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _down_parse_client_service_start_result__isset {
  _down_parse_client_service_start_result__isset() : success(false) {}
  bool success;
} _down_parse_client_service_start_result__isset;

class down_parse_client_service_start_result {
 public:

  down_parse_client_service_start_result() : success(0) {
  }

  virtual ~down_parse_client_service_start_result() throw() {}

  int32_t success;

  _down_parse_client_service_start_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const down_parse_client_service_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const down_parse_client_service_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const down_parse_client_service_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _down_parse_client_service_start_presult__isset {
  _down_parse_client_service_start_presult__isset() : success(false) {}
  bool success;
} _down_parse_client_service_start_presult__isset;

class down_parse_client_service_start_presult {
 public:


  virtual ~down_parse_client_service_start_presult() throw() {}

  int32_t* success;

  _down_parse_client_service_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class down_parse_client_serviceClient : virtual public down_parse_client_serviceIf {
 public:
  down_parse_client_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  down_parse_client_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  int32_t start(const int32_t task_id, const int32_t is_retry);
  void send_start(const int32_t task_id, const int32_t is_retry);
  int32_t recv_start();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class down_parse_client_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<down_parse_client_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (down_parse_client_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  down_parse_client_serviceProcessor(boost::shared_ptr<down_parse_client_serviceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &down_parse_client_serviceProcessor::process_ping;
    processMap_["start"] = &down_parse_client_serviceProcessor::process_start;
  }

  virtual ~down_parse_client_serviceProcessor() {}
};

class down_parse_client_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  down_parse_client_serviceProcessorFactory(const ::boost::shared_ptr< down_parse_client_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< down_parse_client_serviceIfFactory > handlerFactory_;
};

class down_parse_client_serviceMultiface : virtual public down_parse_client_serviceIf {
 public:
  down_parse_client_serviceMultiface(std::vector<boost::shared_ptr<down_parse_client_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~down_parse_client_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<down_parse_client_serviceIf> > ifaces_;
  down_parse_client_serviceMultiface() {}
  void add(boost::shared_ptr<down_parse_client_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  int32_t start(const int32_t task_id, const int32_t is_retry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(task_id, is_retry);
    }
    return ifaces_[i]->start(task_id, is_retry);
  }

};



#endif
