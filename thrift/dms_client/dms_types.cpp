/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dms_types.h"

#include <algorithm>



const char* PicInfo::ascii_fingerprint = "6A84D193C8797DF5BD46E8803DDF1208";
const uint8_t PicInfo::binary_fingerprint[16] = {0x6A,0x84,0xD1,0x93,0xC8,0x79,0x7D,0xF5,0xBD,0x46,0xE8,0x80,0x3D,0xDF,0x12,0x08};

uint32_t PicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sogou_pic_url);
          this->__isset.sogou_pic_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PicInfo");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sogou_pic_url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sogou_pic_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PicInfo &a, PicInfo &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.sogou_pic_url, b.sogou_pic_url);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

const char* ContactInfo::ascii_fingerprint = "ACD0C6E2EBD48ADF76D63DFC276C6827";
const uint8_t ContactInfo::binary_fingerprint[16] = {0xAC,0xD0,0xC6,0xE2,0xEB,0xD4,0x8A,0xDF,0x76,0xD6,0x3D,0xFC,0x27,0x6C,0x68,0x27};

uint32_t ContactInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text_phone);
          this->__isset.text_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->img_phone.read(iprot);
          this->__isset.img_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContactInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text_phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("img_phone", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->img_phone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactInfo &a, ContactInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.text_phone, b.text_phone);
  swap(a.img_phone, b.img_phone);
  swap(a.__isset, b.__isset);
}

const char* AddressInfo::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t AddressInfo::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t AddressInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->district);
          this->__isset.district = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subdistrict);
          this->__isset.subdistrict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detail);
          this->__isset.detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddressInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AddressInfo");

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("district", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->district);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subdistrict", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->subdistrict);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->detail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddressInfo &a, AddressInfo &b) {
  using ::std::swap;
  swap(a.city, b.city);
  swap(a.district, b.district);
  swap(a.subdistrict, b.subdistrict);
  swap(a.detail, b.detail);
  swap(a.__isset, b.__isset);
}

const char* DocInfo::ascii_fingerprint = "364A389FF8A06E2F5372C06D8A801D76";
const uint8_t DocInfo::binary_fingerprint[16] = {0x36,0x4A,0x38,0x9F,0xF8,0xA0,0x6E,0x2F,0x53,0x72,0xC0,0x6D,0x8A,0x80,0x1D,0x76};

uint32_t DocInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->docid);
          this->__isset.docid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->finger);
          this->__isset.finger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title2);
          this->__isset.title2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subcategory);
          this->__isset.subcategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keywords.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->keywords.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->keywords[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.keywords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->list_pic.read(iprot);
          this->__isset.list_pic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pics.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->pics.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->pics[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fetch_time);
          this->__isset.fetch_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_modify_time);
          this->__isset.last_modify_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->summary);
          this->__isset.summary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DocInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocInfo");

  xfer += oprot->writeFieldBegin("docid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->docid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finger", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->finger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title2", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->title2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subcategory", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->subcategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keywords", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keywords.size()));
    std::vector<std::string> ::const_iterator _iter10;
    for (_iter10 = this->keywords.begin(); _iter10 != this->keywords.end(); ++_iter10)
    {
      xfer += oprot->writeString((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("list_pic", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->list_pic.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pics", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pics.size()));
    std::vector<PicInfo> ::const_iterator _iter11;
    for (_iter11 = this->pics.begin(); _iter11 != this->pics.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fetch_time", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->fetch_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_modify_time", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->last_modify_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->contact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("summary", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->summary);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocInfo &a, DocInfo &b) {
  using ::std::swap;
  swap(a.docid, b.docid);
  swap(a.finger, b.finger);
  swap(a.title, b.title);
  swap(a.title2, b.title2);
  swap(a.category, b.category);
  swap(a.subcategory, b.subcategory);
  swap(a.keywords, b.keywords);
  swap(a.url, b.url);
  swap(a.list_pic, b.list_pic);
  swap(a.pics, b.pics);
  swap(a.domain, b.domain);
  swap(a.fetch_time, b.fetch_time);
  swap(a.last_modify_time, b.last_modify_time);
  swap(a.contact, b.contact);
  swap(a.price, b.price);
  swap(a.summary, b.summary);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

const char* DocReturn::ascii_fingerprint = "23A98555B4E1C8D51C6643B2BD857A27";
const uint8_t DocReturn::binary_fingerprint[16] = {0x23,0xA9,0x85,0x55,0xB4,0xE1,0xC8,0xD5,0x1C,0x66,0x43,0xB2,0xBD,0x85,0x7A,0x27};

uint32_t DocReturn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->doc.read(iprot);
          this->__isset.doc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DocReturn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocReturn");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doc", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->doc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocReturn &a, DocReturn &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.doc, b.doc);
  swap(a.__isset, b.__isset);
}


