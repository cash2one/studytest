/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef page_download_TYPES_H
#define page_download_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace page_download {

typedef struct _crawler_arg__isset {
  _crawler_arg__isset() : task_id(true), start(true), limit(true) {}
  bool task_id;
  bool start;
  bool limit;
} _crawler_arg__isset;

class crawler_arg {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  crawler_arg() : task_id(0), start(0), limit(0) {
  }

  virtual ~crawler_arg() throw() {}

  int32_t task_id;
  int32_t start;
  int32_t limit;

  _crawler_arg__isset __isset;

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  void __set_start(const int32_t val) {
    start = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  bool operator == (const crawler_arg & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const crawler_arg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crawler_arg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(crawler_arg &a, crawler_arg &b);

} // namespace

#endif
