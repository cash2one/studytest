/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef srpp_parser_H
#define srpp_parser_H

#include <thrift/TDispatchProcessor.h>
#include "srpp_parser_types.h"



class srpp_parserIf {
 public:
  virtual ~srpp_parserIf() {}
  virtual int32_t ping() = 0;
  virtual void parseHtml(std::string& _return, const parse_arg& arg) = 0;
};

class srpp_parserIfFactory {
 public:
  typedef srpp_parserIf Handler;

  virtual ~srpp_parserIfFactory() {}

  virtual srpp_parserIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(srpp_parserIf* /* handler */) = 0;
};

class srpp_parserIfSingletonFactory : virtual public srpp_parserIfFactory {
 public:
  srpp_parserIfSingletonFactory(const boost::shared_ptr<srpp_parserIf>& iface) : iface_(iface) {}
  virtual ~srpp_parserIfSingletonFactory() {}

  virtual srpp_parserIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(srpp_parserIf* /* handler */) {}

 protected:
  boost::shared_ptr<srpp_parserIf> iface_;
};

class srpp_parserNull : virtual public srpp_parserIf {
 public:
  virtual ~srpp_parserNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void parseHtml(std::string& /* _return */, const parse_arg& /* arg */) {
    return;
  }
};


class srpp_parser_ping_args {
 public:

  srpp_parser_ping_args() {
  }

  virtual ~srpp_parser_ping_args() throw() {}


  bool operator == (const srpp_parser_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const srpp_parser_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const srpp_parser_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class srpp_parser_ping_pargs {
 public:


  virtual ~srpp_parser_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _srpp_parser_ping_result__isset {
  _srpp_parser_ping_result__isset() : success(false) {}
  bool success;
} _srpp_parser_ping_result__isset;

class srpp_parser_ping_result {
 public:

  srpp_parser_ping_result() : success(0) {
  }

  virtual ~srpp_parser_ping_result() throw() {}

  int32_t success;

  _srpp_parser_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const srpp_parser_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const srpp_parser_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const srpp_parser_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _srpp_parser_ping_presult__isset {
  _srpp_parser_ping_presult__isset() : success(false) {}
  bool success;
} _srpp_parser_ping_presult__isset;

class srpp_parser_ping_presult {
 public:


  virtual ~srpp_parser_ping_presult() throw() {}

  int32_t* success;

  _srpp_parser_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _srpp_parser_parseHtml_args__isset {
  _srpp_parser_parseHtml_args__isset() : arg(false) {}
  bool arg;
} _srpp_parser_parseHtml_args__isset;

class srpp_parser_parseHtml_args {
 public:

  srpp_parser_parseHtml_args() {
  }

  virtual ~srpp_parser_parseHtml_args() throw() {}

  parse_arg arg;

  _srpp_parser_parseHtml_args__isset __isset;

  void __set_arg(const parse_arg& val) {
    arg = val;
  }

  bool operator == (const srpp_parser_parseHtml_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const srpp_parser_parseHtml_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const srpp_parser_parseHtml_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class srpp_parser_parseHtml_pargs {
 public:


  virtual ~srpp_parser_parseHtml_pargs() throw() {}

  const parse_arg* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _srpp_parser_parseHtml_result__isset {
  _srpp_parser_parseHtml_result__isset() : success(false) {}
  bool success;
} _srpp_parser_parseHtml_result__isset;

class srpp_parser_parseHtml_result {
 public:

  srpp_parser_parseHtml_result() : success() {
  }

  virtual ~srpp_parser_parseHtml_result() throw() {}

  std::string success;

  _srpp_parser_parseHtml_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const srpp_parser_parseHtml_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const srpp_parser_parseHtml_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const srpp_parser_parseHtml_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _srpp_parser_parseHtml_presult__isset {
  _srpp_parser_parseHtml_presult__isset() : success(false) {}
  bool success;
} _srpp_parser_parseHtml_presult__isset;

class srpp_parser_parseHtml_presult {
 public:


  virtual ~srpp_parser_parseHtml_presult() throw() {}

  std::string* success;

  _srpp_parser_parseHtml_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class srpp_parserClient : virtual public srpp_parserIf {
 public:
  srpp_parserClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  srpp_parserClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void parseHtml(std::string& _return, const parse_arg& arg);
  void send_parseHtml(const parse_arg& arg);
  void recv_parseHtml(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class srpp_parserProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<srpp_parserIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (srpp_parserProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_parseHtml(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  srpp_parserProcessor(boost::shared_ptr<srpp_parserIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &srpp_parserProcessor::process_ping;
    processMap_["parseHtml"] = &srpp_parserProcessor::process_parseHtml;
  }

  virtual ~srpp_parserProcessor() {}
};

class srpp_parserProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  srpp_parserProcessorFactory(const ::boost::shared_ptr< srpp_parserIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< srpp_parserIfFactory > handlerFactory_;
};

class srpp_parserMultiface : virtual public srpp_parserIf {
 public:
  srpp_parserMultiface(std::vector<boost::shared_ptr<srpp_parserIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~srpp_parserMultiface() {}
 protected:
  std::vector<boost::shared_ptr<srpp_parserIf> > ifaces_;
  srpp_parserMultiface() {}
  void add(boost::shared_ptr<srpp_parserIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void parseHtml(std::string& _return, const parse_arg& arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->parseHtml(_return, arg);
    }
    ifaces_[i]->parseHtml(_return, arg);
    return;
  }

};



#endif
