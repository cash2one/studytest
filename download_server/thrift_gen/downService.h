/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef downService_H
#define downService_H

#include <thrift/TDispatchProcessor.h>
#include "download_types.h"



class downServiceIf {
 public:
  virtual ~downServiceIf() {}
  virtual int32_t ping() = 0;
  virtual double run_down(const std::vector<std::string> & arg, const std::string& proxy_host) = 0;
};

class downServiceIfFactory {
 public:
  typedef downServiceIf Handler;

  virtual ~downServiceIfFactory() {}

  virtual downServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(downServiceIf* /* handler */) = 0;
};

class downServiceIfSingletonFactory : virtual public downServiceIfFactory {
 public:
  downServiceIfSingletonFactory(const boost::shared_ptr<downServiceIf>& iface) : iface_(iface) {}
  virtual ~downServiceIfSingletonFactory() {}

  virtual downServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(downServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<downServiceIf> iface_;
};

class downServiceNull : virtual public downServiceIf {
 public:
  virtual ~downServiceNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  double run_down(const std::vector<std::string> & /* arg */, const std::string& /* proxy_host */) {
    double _return = (double)0;
    return _return;
  }
};


class downService_ping_args {
 public:

  downService_ping_args() {
  }

  virtual ~downService_ping_args() throw() {}


  bool operator == (const downService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const downService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const downService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class downService_ping_pargs {
 public:


  virtual ~downService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _downService_ping_result__isset {
  _downService_ping_result__isset() : success(false) {}
  bool success;
} _downService_ping_result__isset;

class downService_ping_result {
 public:

  downService_ping_result() : success(0) {
  }

  virtual ~downService_ping_result() throw() {}

  int32_t success;

  _downService_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const downService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const downService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const downService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _downService_ping_presult__isset {
  _downService_ping_presult__isset() : success(false) {}
  bool success;
} _downService_ping_presult__isset;

class downService_ping_presult {
 public:


  virtual ~downService_ping_presult() throw() {}

  int32_t* success;

  _downService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _downService_run_down_args__isset {
  _downService_run_down_args__isset() : arg(false), proxy_host(false) {}
  bool arg;
  bool proxy_host;
} _downService_run_down_args__isset;

class downService_run_down_args {
 public:

  downService_run_down_args() : proxy_host() {
  }

  virtual ~downService_run_down_args() throw() {}

  std::vector<std::string>  arg;
  std::string proxy_host;

  _downService_run_down_args__isset __isset;

  void __set_arg(const std::vector<std::string> & val) {
    arg = val;
  }

  void __set_proxy_host(const std::string& val) {
    proxy_host = val;
  }

  bool operator == (const downService_run_down_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    if (!(proxy_host == rhs.proxy_host))
      return false;
    return true;
  }
  bool operator != (const downService_run_down_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const downService_run_down_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class downService_run_down_pargs {
 public:


  virtual ~downService_run_down_pargs() throw() {}

  const std::vector<std::string> * arg;
  const std::string* proxy_host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _downService_run_down_result__isset {
  _downService_run_down_result__isset() : success(false) {}
  bool success;
} _downService_run_down_result__isset;

class downService_run_down_result {
 public:

  downService_run_down_result() : success(0) {
  }

  virtual ~downService_run_down_result() throw() {}

  double success;

  _downService_run_down_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const downService_run_down_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const downService_run_down_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const downService_run_down_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _downService_run_down_presult__isset {
  _downService_run_down_presult__isset() : success(false) {}
  bool success;
} _downService_run_down_presult__isset;

class downService_run_down_presult {
 public:


  virtual ~downService_run_down_presult() throw() {}

  double* success;

  _downService_run_down_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class downServiceClient : virtual public downServiceIf {
 public:
  downServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  downServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  double run_down(const std::vector<std::string> & arg, const std::string& proxy_host);
  void send_run_down(const std::vector<std::string> & arg, const std::string& proxy_host);
  double recv_run_down();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class downServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<downServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (downServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run_down(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  downServiceProcessor(boost::shared_ptr<downServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &downServiceProcessor::process_ping;
    processMap_["run_down"] = &downServiceProcessor::process_run_down;
  }

  virtual ~downServiceProcessor() {}
};

class downServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  downServiceProcessorFactory(const ::boost::shared_ptr< downServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< downServiceIfFactory > handlerFactory_;
};

class downServiceMultiface : virtual public downServiceIf {
 public:
  downServiceMultiface(std::vector<boost::shared_ptr<downServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~downServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<downServiceIf> > ifaces_;
  downServiceMultiface() {}
  void add(boost::shared_ptr<downServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  double run_down(const std::vector<std::string> & arg, const std::string& proxy_host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run_down(arg, proxy_host);
    }
    return ifaces_[i]->run_down(arg, proxy_host);
  }

};



#endif
