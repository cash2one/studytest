/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dms_TYPES_H
#define dms_TYPES_H

#include <stdint.h>
#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _PicInfo__isset {
  _PicInfo__isset() : url(false), sogou_pic_url(false), width(false), height(false), size(false) {}
  bool url;
  bool sogou_pic_url;
  bool width;
  bool height;
  bool size;
} _PicInfo__isset;

class PicInfo {
 public:

  static const char* ascii_fingerprint; // = "6A84D193C8797DF5BD46E8803DDF1208";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x84,0xD1,0x93,0xC8,0x79,0x7D,0xF5,0xBD,0x46,0xE8,0x80,0x3D,0xDF,0x12,0x08};

  PicInfo() : url(), sogou_pic_url(), width(0), height(0), size(0) {
  }

  virtual ~PicInfo() throw() {}

  std::string url;
  std::string sogou_pic_url;
  int32_t width;
  int32_t height;
  int32_t size;

  _PicInfo__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_sogou_pic_url(const std::string& val) {
    sogou_pic_url = val;
  }

  void __set_width(const int32_t val) {
    width = val;
  }

  void __set_height(const int32_t val) {
    height = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const PicInfo & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(sogou_pic_url == rhs.sogou_pic_url))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const PicInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PicInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PicInfo &a, PicInfo &b);

typedef struct _ContactInfo__isset {
  _ContactInfo__isset() : name(false), text_phone(false), img_phone(false) {}
  bool name;
  bool text_phone;
  bool img_phone;
} _ContactInfo__isset;

class ContactInfo {
 public:

  static const char* ascii_fingerprint; // = "ACD0C6E2EBD48ADF76D63DFC276C6827";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xD0,0xC6,0xE2,0xEB,0xD4,0x8A,0xDF,0x76,0xD6,0x3D,0xFC,0x27,0x6C,0x68,0x27};

  ContactInfo() : name(), text_phone() {
  }

  virtual ~ContactInfo() throw() {}

  std::string name;
  std::string text_phone;
  PicInfo img_phone;

  _ContactInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_text_phone(const std::string& val) {
    text_phone = val;
  }

  void __set_img_phone(const PicInfo& val) {
    img_phone = val;
  }

  bool operator == (const ContactInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text_phone == rhs.text_phone))
      return false;
    if (!(img_phone == rhs.img_phone))
      return false;
    return true;
  }
  bool operator != (const ContactInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContactInfo &a, ContactInfo &b);

typedef struct _AddressInfo__isset {
  _AddressInfo__isset() : city(false), district(false), subdistrict(false), detail(false) {}
  bool city;
  bool district;
  bool subdistrict;
  bool detail;
} _AddressInfo__isset;

class AddressInfo {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  AddressInfo() : city(), district(), subdistrict(), detail() {
  }

  virtual ~AddressInfo() throw() {}

  std::string city;
  std::string district;
  std::string subdistrict;
  std::string detail;

  _AddressInfo__isset __isset;

  void __set_city(const std::string& val) {
    city = val;
  }

  void __set_district(const std::string& val) {
    district = val;
  }

  void __set_subdistrict(const std::string& val) {
    subdistrict = val;
  }

  void __set_detail(const std::string& val) {
    detail = val;
  }

  bool operator == (const AddressInfo & rhs) const
  {
    if (!(city == rhs.city))
      return false;
    if (!(district == rhs.district))
      return false;
    if (!(subdistrict == rhs.subdistrict))
      return false;
    if (!(detail == rhs.detail))
      return false;
    return true;
  }
  bool operator != (const AddressInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddressInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddressInfo &a, AddressInfo &b);

typedef struct _DocInfo__isset {
  _DocInfo__isset() : docid(false), finger(false), title(false), title2(false), category(false), subcategory(false), keywords(false), url(false), list_pic(false), pics(false), domain(false), fetch_time(false), last_modify_time(false), contact(false), price(false), summary(false), addr(false) {}
  bool docid;
  bool finger;
  bool title;
  bool title2;
  bool category;
  bool subcategory;
  bool keywords;
  bool url;
  bool list_pic;
  bool pics;
  bool domain;
  bool fetch_time;
  bool last_modify_time;
  bool contact;
  bool price;
  bool summary;
  bool addr;
} _DocInfo__isset;

class DocInfo {
 public:

  static const char* ascii_fingerprint; // = "364A389FF8A06E2F5372C06D8A801D76";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x4A,0x38,0x9F,0xF8,0xA0,0x6E,0x2F,0x53,0x72,0xC0,0x6D,0x8A,0x80,0x1D,0x76};

  DocInfo() : docid(), finger(), title(), title2(), category(), subcategory(), url(), domain(), fetch_time(0), last_modify_time(0), price(), summary() {
  }

  virtual ~DocInfo() throw() {}

  std::string docid;
  std::string finger;
  std::string title;
  std::string title2;
  std::string category;
  std::string subcategory;
  std::vector<std::string>  keywords;
  std::string url;
  PicInfo list_pic;
  std::vector<PicInfo>  pics;
  std::string domain;
  int32_t fetch_time;
  int32_t last_modify_time;
  ContactInfo contact;
  std::string price;
  std::string summary;
  AddressInfo addr;

  _DocInfo__isset __isset;

  void __set_docid(const std::string& val) {
    docid = val;
  }

  void __set_finger(const std::string& val) {
    finger = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_title2(const std::string& val) {
    title2 = val;
  }

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_subcategory(const std::string& val) {
    subcategory = val;
  }

  void __set_keywords(const std::vector<std::string> & val) {
    keywords = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_list_pic(const PicInfo& val) {
    list_pic = val;
  }

  void __set_pics(const std::vector<PicInfo> & val) {
    pics = val;
  }

  void __set_domain(const std::string& val) {
    domain = val;
  }

  void __set_fetch_time(const int32_t val) {
    fetch_time = val;
  }

  void __set_last_modify_time(const int32_t val) {
    last_modify_time = val;
  }

  void __set_contact(const ContactInfo& val) {
    contact = val;
  }

  void __set_price(const std::string& val) {
    price = val;
  }

  void __set_summary(const std::string& val) {
    summary = val;
  }

  void __set_addr(const AddressInfo& val) {
    addr = val;
  }

  bool operator == (const DocInfo & rhs) const
  {
    if (!(docid == rhs.docid))
      return false;
    if (!(finger == rhs.finger))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(title2 == rhs.title2))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(subcategory == rhs.subcategory))
      return false;
    if (!(keywords == rhs.keywords))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(list_pic == rhs.list_pic))
      return false;
    if (!(pics == rhs.pics))
      return false;
    if (!(domain == rhs.domain))
      return false;
    if (!(fetch_time == rhs.fetch_time))
      return false;
    if (!(last_modify_time == rhs.last_modify_time))
      return false;
    if (!(contact == rhs.contact))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(summary == rhs.summary))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const DocInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DocInfo &a, DocInfo &b);

typedef struct _DocReturn__isset {
  _DocReturn__isset() : ret(false), doc(false) {}
  bool ret;
  bool doc;
} _DocReturn__isset;

class DocReturn {
 public:

  static const char* ascii_fingerprint; // = "23A98555B4E1C8D51C6643B2BD857A27";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0xA9,0x85,0x55,0xB4,0xE1,0xC8,0xD5,0x1C,0x66,0x43,0xB2,0xBD,0x85,0x7A,0x27};

  DocReturn() : ret(0) {
  }

  virtual ~DocReturn() throw() {}

  int32_t ret;
  DocInfo doc;

  _DocReturn__isset __isset;

  void __set_ret(const int32_t val) {
    ret = val;
  }

  void __set_doc(const DocInfo& val) {
    doc = val;
  }

  bool operator == (const DocReturn & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(doc == rhs.doc))
      return false;
    return true;
  }
  bool operator != (const DocReturn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocReturn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DocReturn &a, DocReturn &b);



#endif
