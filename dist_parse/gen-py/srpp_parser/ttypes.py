#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class parse_arg:
  """
  Attributes:
   - html_content
   - extra
   - engine
   - ret_action
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'html_content', None, "", ), # 1
    (2, TType.STRING, 'extra', None, "", ), # 2
    (3, TType.STRING, 'engine', None, "sogou", ), # 3
    (4, TType.I32, 'ret_action', None, 0, ), # 4
  )

  def __init__(self, html_content=thrift_spec[1][4], extra=thrift_spec[2][4], engine=thrift_spec[3][4], ret_action=thrift_spec[4][4],):
    self.html_content = html_content
    self.extra = extra
    self.engine = engine
    self.ret_action = ret_action

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.html_content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.extra = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.engine = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ret_action = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('parse_arg')
    if self.html_content is not None:
      oprot.writeFieldBegin('html_content', TType.STRING, 1)
      oprot.writeString(self.html_content)
      oprot.writeFieldEnd()
    if self.extra is not None:
      oprot.writeFieldBegin('extra', TType.STRING, 2)
      oprot.writeString(self.extra)
      oprot.writeFieldEnd()
    if self.engine is not None:
      oprot.writeFieldBegin('engine', TType.STRING, 3)
      oprot.writeString(self.engine)
      oprot.writeFieldEnd()
    if self.ret_action is not None:
      oprot.writeFieldBegin('ret_action', TType.I32, 4)
      oprot.writeI32(self.ret_action)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
