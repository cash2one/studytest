/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DmsService_H
#define DmsService_H

#include "dms_types.h"
#include <thrift/TDispatchProcessor.h>



class DmsServiceIf {
 public:
  virtual ~DmsServiceIf() {}
  virtual int32_t insert(const DocInfo& doc) = 0;
  virtual void get(DocReturn& _return, const std::string& docid) = 0;
  virtual int32_t del_doc(const std::string& docid) = 0;
};

class DmsServiceIfFactory {
 public:
  typedef DmsServiceIf Handler;

  virtual ~DmsServiceIfFactory() {}

  virtual DmsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DmsServiceIf* /* handler */) = 0;
};

class DmsServiceIfSingletonFactory : virtual public DmsServiceIfFactory {
 public:
  DmsServiceIfSingletonFactory(const boost::shared_ptr<DmsServiceIf>& iface) : iface_(iface) {}
  virtual ~DmsServiceIfSingletonFactory() {}

  virtual DmsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DmsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DmsServiceIf> iface_;
};

class DmsServiceNull : virtual public DmsServiceIf {
 public:
  virtual ~DmsServiceNull() {}
  int32_t insert(const DocInfo& /* doc */) {
    int32_t _return = 0;
    return _return;
  }
  void get(DocReturn& /* _return */, const std::string& /* docid */) {
    return;
  }
  int32_t del_doc(const std::string& /* docid */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _DmsService_insert_args__isset {
  _DmsService_insert_args__isset() : doc(false) {}
  bool doc;
} _DmsService_insert_args__isset;

class DmsService_insert_args {
 public:

  DmsService_insert_args() {
  }

  virtual ~DmsService_insert_args() throw() {}

  DocInfo doc;

  _DmsService_insert_args__isset __isset;

  void __set_doc(const DocInfo& val) {
    doc = val;
  }

  bool operator == (const DmsService_insert_args & rhs) const
  {
    if (!(doc == rhs.doc))
      return false;
    return true;
  }
  bool operator != (const DmsService_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmsService_insert_pargs {
 public:


  virtual ~DmsService_insert_pargs() throw() {}

  const DocInfo* doc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_insert_result__isset {
  _DmsService_insert_result__isset() : success(false) {}
  bool success;
} _DmsService_insert_result__isset;

class DmsService_insert_result {
 public:

  DmsService_insert_result() : success(0) {
  }

  virtual ~DmsService_insert_result() throw() {}

  int32_t success;

  _DmsService_insert_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DmsService_insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmsService_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_insert_presult__isset {
  _DmsService_insert_presult__isset() : success(false) {}
  bool success;
} _DmsService_insert_presult__isset;

class DmsService_insert_presult {
 public:


  virtual ~DmsService_insert_presult() throw() {}

  int32_t* success;

  _DmsService_insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DmsService_get_args__isset {
  _DmsService_get_args__isset() : docid(false) {}
  bool docid;
} _DmsService_get_args__isset;

class DmsService_get_args {
 public:

  DmsService_get_args() : docid() {
  }

  virtual ~DmsService_get_args() throw() {}

  std::string docid;

  _DmsService_get_args__isset __isset;

  void __set_docid(const std::string& val) {
    docid = val;
  }

  bool operator == (const DmsService_get_args & rhs) const
  {
    if (!(docid == rhs.docid))
      return false;
    return true;
  }
  bool operator != (const DmsService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmsService_get_pargs {
 public:


  virtual ~DmsService_get_pargs() throw() {}

  const std::string* docid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_get_result__isset {
  _DmsService_get_result__isset() : success(false) {}
  bool success;
} _DmsService_get_result__isset;

class DmsService_get_result {
 public:

  DmsService_get_result() {
  }

  virtual ~DmsService_get_result() throw() {}

  DocReturn success;

  _DmsService_get_result__isset __isset;

  void __set_success(const DocReturn& val) {
    success = val;
  }

  bool operator == (const DmsService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmsService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_get_presult__isset {
  _DmsService_get_presult__isset() : success(false) {}
  bool success;
} _DmsService_get_presult__isset;

class DmsService_get_presult {
 public:


  virtual ~DmsService_get_presult() throw() {}

  DocReturn* success;

  _DmsService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DmsService_del_doc_args__isset {
  _DmsService_del_doc_args__isset() : docid(false) {}
  bool docid;
} _DmsService_del_doc_args__isset;

class DmsService_del_doc_args {
 public:

  DmsService_del_doc_args() : docid() {
  }

  virtual ~DmsService_del_doc_args() throw() {}

  std::string docid;

  _DmsService_del_doc_args__isset __isset;

  void __set_docid(const std::string& val) {
    docid = val;
  }

  bool operator == (const DmsService_del_doc_args & rhs) const
  {
    if (!(docid == rhs.docid))
      return false;
    return true;
  }
  bool operator != (const DmsService_del_doc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_del_doc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmsService_del_doc_pargs {
 public:


  virtual ~DmsService_del_doc_pargs() throw() {}

  const std::string* docid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_del_doc_result__isset {
  _DmsService_del_doc_result__isset() : success(false) {}
  bool success;
} _DmsService_del_doc_result__isset;

class DmsService_del_doc_result {
 public:

  DmsService_del_doc_result() : success(0) {
  }

  virtual ~DmsService_del_doc_result() throw() {}

  int32_t success;

  _DmsService_del_doc_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DmsService_del_doc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmsService_del_doc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmsService_del_doc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmsService_del_doc_presult__isset {
  _DmsService_del_doc_presult__isset() : success(false) {}
  bool success;
} _DmsService_del_doc_presult__isset;

class DmsService_del_doc_presult {
 public:


  virtual ~DmsService_del_doc_presult() throw() {}

  int32_t* success;

  _DmsService_del_doc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DmsServiceClient : virtual public DmsServiceIf {
 public:
  DmsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DmsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t insert(const DocInfo& doc);
  void send_insert(const DocInfo& doc);
  int32_t recv_insert();
  void get(DocReturn& _return, const std::string& docid);
  void send_get(const std::string& docid);
  void recv_get(DocReturn& _return);
  int32_t del_doc(const std::string& docid);
  void send_del_doc(const std::string& docid);
  int32_t recv_del_doc();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DmsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DmsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DmsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_doc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DmsServiceProcessor(boost::shared_ptr<DmsServiceIf> iface) :
    iface_(iface) {
    processMap_["insert"] = &DmsServiceProcessor::process_insert;
    processMap_["get"] = &DmsServiceProcessor::process_get;
    processMap_["del_doc"] = &DmsServiceProcessor::process_del_doc;
  }

  virtual ~DmsServiceProcessor() {}
};

class DmsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DmsServiceProcessorFactory(const ::boost::shared_ptr< DmsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DmsServiceIfFactory > handlerFactory_;
};

class DmsServiceMultiface : virtual public DmsServiceIf {
 public:
  DmsServiceMultiface(std::vector<boost::shared_ptr<DmsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DmsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DmsServiceIf> > ifaces_;
  DmsServiceMultiface() {}
  void add(boost::shared_ptr<DmsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t insert(const DocInfo& doc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(doc);
    }
    return ifaces_[i]->insert(doc);
  }

  void get(DocReturn& _return, const std::string& docid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, docid);
    }
    ifaces_[i]->get(_return, docid);
    return;
  }

  int32_t del_doc(const std::string& docid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_doc(docid);
    }
    return ifaces_[i]->del_doc(docid);
  }

};



#endif
