/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef srpp_parser_TYPES_H
#define srpp_parser_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _parse_arg__isset {
  _parse_arg__isset() : html_content(true), extra(true), engine(true), ret_action(true) {}
  bool html_content;
  bool extra;
  bool engine;
  bool ret_action;
} _parse_arg__isset;

class parse_arg {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

  parse_arg() : html_content(""), extra(""), engine("sogou"), ret_action(0) {
  }

  virtual ~parse_arg() throw() {}

  std::string html_content;
  std::string extra;
  std::string engine;
  int32_t ret_action;

  _parse_arg__isset __isset;

  void __set_html_content(const std::string& val) {
    html_content = val;
  }

  void __set_extra(const std::string& val) {
    extra = val;
  }

  void __set_engine(const std::string& val) {
    engine = val;
  }

  void __set_ret_action(const int32_t val) {
    ret_action = val;
  }

  bool operator == (const parse_arg & rhs) const
  {
    if (!(html_content == rhs.html_content))
      return false;
    if (!(extra == rhs.extra))
      return false;
    if (!(engine == rhs.engine))
      return false;
    if (!(ret_action == rhs.ret_action))
      return false;
    return true;
  }
  bool operator != (const parse_arg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const parse_arg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(parse_arg &a, parse_arg &b);



#endif
